mesecni_podatki[vrstica, 2] <- podatki_temp[podatki_temp$Strosek == "Elektrika",
"Vrednost"]
# Povečamo spremenljivko vrstica, da bomo v naslednji ponovitvi dodali
# vrednosti v naslednjo vrstico.
vrstica <- vrstica + 1
}
# Vstavimo ime lista in podatek o elektriki v data frame (prvi in drugi stolpec).
mesecni_podatki[vrstica, 1] <- imeLista
View(mesecni_podatki)
class(imeLista)
# Ustvarimo prazen data frame.
mesecni_podatki <- data.frame(mesec = character(0),
stroski_elektrike = numeric(0), stringsAsFactors = FALSE)
vrstica <- 1
for (imeLista in sheetNames) {
if (imeLista == "Opozorilo") {
next
}
podatki_temp <- podatki[[imeLista]]
# Vstavimo ime lista in podatek o elektriki v data frame (prvi in drugi stolpec).
mesecni_podatki[vrstica, 1] <- imeLista
mesecni_podatki[vrstica, 2] <- podatki_temp[podatki_temp$Strosek == "Elektrika",
"Vrednost"]
# Povečamo spremenljivko vrstica, da bomo v naslednji ponovitvi dodali
# vrednosti v naslednjo vrstico.
vrstica <- vrstica + 1
}
# Dodamo datume.
datumi <- seq.Date(as.Date("2014-12-01"), as.Date("2020-10-01"), by = "months")
mesecni_podatki$datum <- datumi
head(mesecni_podatki)
df2 <- data[, c("Date", "Rainfall")]
df2$Quarter <- factor(quarter(df2$Date))
ggplot(data = df2, aes(x = Qarter, y = Rainfall)) + geom_bar(stat = 'mean')
ggplot(data = df2, aes(x = Qarter, y = Rainfall)) + geom_bar(stat = 'sum')
ggplot(data = df2, aes(x = Quarter, y = Rainfall)) + geom_bar(stat = 'sum')
ggplot(data = df2, aes(x = Quarter, y = Rainfall)) + geom_bar(stat = "summary", fun = mean)
ggplot(data = df2, aes(x = Quarter, y = Rainfall)) + geom_bar(stat = "summary", fun = mean) + ylab("Rainfall (mm)")
ggplot(data = df2, aes(x = Quarter, y = Rainfall)) + geom_bar(stat = "summary", fun = mean) + geom_errorbar(stat = "summary", fun = sd")
ggplot(data = df2, aes(x = Quarter, y = Rainfall)) + geom_bar(stat = "summary", fun = mean) + geom_errorbar(stat = "summary", fun = sd)
df3 <- tapply(df2$Rainfall, df2$Quarter, mean)
df3 <- data.frame( mean = tapply(df2$Rainfall, df2$Quarter, mean),
sd = tapply(df2$Rainfall, df2$Quarter, sd))
View(df3)
df3$Quarter <- levels(df2$Quarter)
se <- function(x) return sd(x)/length(x)
se <- function(x) return (sd(x)/length(x))
df3 <- data.frame( mean = tapply(df2$Rainfall, df2$Quarter, mean),
sd = tapply(df2$Rainfall, df2$Quarter, se))
df3$Quarter <- levels(df2$Quarter)
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin = mean-sd, ymax = mean+se))
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin = mean-sd, ymax = mean+se), stat = "identity")
se <- function(x) return (sd(x)/sqrt(length(x))
df3 <- data.frame( mean = tapply(df2$Rainfall, df2$Quarter, mean),
se <- function(x) return (sd(x)/sqrt(length(x)))
df3 <- data.frame( mean = tapply(df2$Rainfall, df2$Quarter, mean),
sd = tapply(df2$Rainfall, df2$Quarter, se))
df3$Quarter <- levels(df2$Quarter)
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin = mean-sd, ymax = mean+se), stat = "identity")
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity")
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity", width = 0.75) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity")
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity", width = 0.5) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity")
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity", width = 0.5) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity", width = 0.5)
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity", width = 0.5) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity", width = 0.1)
ggplot(data = df3, aes(x = Quarter, y = mean)) + geom_bar(stat = "identity", width = 0.5) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity", width = 0.1, size = 1.1)
ggplot(data = df3, aes(x = Quarter, y = mean, color = Quarter)) + geom_bar(stat = "identity", width = 0.5) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity", width = 0.1, size = 1.1)
ggplot(data = df3, aes(x = Quarter, y = mean, fill = Quarter)) + geom_bar(stat = "identity", width = 0.5) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity", width = 0.1, size = 1.1)
ggplot(data = df3, aes(x = Quarter, y = mean, fill = Quarter)) + geom_bar(stat = "identity", width = 0.5) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity", width = 0.1, size = 1.1) + ylab("Rainfall (mm)")
cor(data)
cor(data[,3:15])
cor(data[,c(3:7, 9:15)])
str(data[,c(3:7, 9:15)])
str(data[,c(3:7, 10:15)])
cor(data[,c(3:7, 10:15)])
ggplot(data, aes(x=Months, y = Temp+geompoint))
ggplot(data, aes(x=Months, y = Temp)) + geom_point()
a <- data[, c("Date", "Temp")]
a$days <- sin(2*pi*day(data$Date)/365.25)
ggplot(data, aes(x=days, y = Temp)) + geom_point()
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- sin(2*pi*days(data$Date)/365.25)
a$days <- sin(2*pi*days(data$Date)/365.25)
a <- data[, c("Date", "Temp")]
a$days <- sin(2*pi*days(data$Date)/365.25)
a$days <- sin(2*pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- cos(2*pi*yday(data$Date)/365.25)
a$dd <- day)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- cos(pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- cos(2*pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- cos(4*pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- cos(2*pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- sin(2*pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- sin(pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- sin(4*pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$days <- sin(2*pi*yday(data$Date)/365.25)
ggplot(a, aes(x=days, y = Temp)) + geom_point()
ggplot(a, aes(x=Date, y = days)) + geom_point()
a$days <- cos(2*pi*yday(data$Date)/365.25)
ggplot(a, aes(x=Date, y = days)) + geom_point()
ggplot(a, aes(x=days, y = Temp)) + geom_point()
a$Quarter <- quarter(a$Date)
ggplot(a, aes(x=days, y = Temp, color = Quarter)) + geom_point()
a$Quarter <- as.factor(quarter(a$Date))
ggplot(a, aes(x=days, y = Temp, color = Quarter)) + geom_point()
a$days <- cos(-2*pi*yday(data$Date)/365.25)
a$Quarter <- as.factor(quarter(a$Date))
ggplot(a, aes(x=days, y = Temp, color = Quarter)) + geom_point()
a$days <- cos(2*pi*yday(data$Date)/365.25)
a$Quarter <- as.factor(quarter(a$Date))
ggplot(a, aes(x=days, y = Temp, color = Quarter)) + geom_point()
a$days <- sin(2*pi*yday(data$Date)/365.25)
a <- data[, c("Date", "Temp")]
a$days <- sin(2*pi*yday(data$Date)/365.25)
a$Quarter <- as.factor(quarter(a$Date))
ggplot(a, aes(x=days, y = Temp, color = Quarter)) + geom_point()
df4 %>% filter(data, Date > "201s-01-01", Date < "2014-01-01" )
df4 <- filter(data, Date > "201s-01-01", Date < "2014-01-01" )
data$Date as.Date(data$Date)
data$Date <- as.Date(data$Date)
df4 <- filter(data, Date > "201s-01-01", Date < "2014-01-01" )
df4 <- filter(data, Date > "2012-01-01", Date < "2014-01-01" )
df4 <- filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(Humidity, Pressure, Temp)
df4 <- filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Pressure, Temp), names_to = "Measurment", values_to = "value")
df4 <- filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Pressure, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_path() + geom_point(aes(color = RainTomorrow)
df4
df4 <- filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Pressure, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_path() + geom_point(aes(color = RainTomorrow))
df4
df4 <- filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Pressure, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_path() + geom_point(aes(x = Date, y = Value, color = RainTomorrow))
df4
df4 <- filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Pressure, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_path() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = F)
df4
df4 <- filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Pressure, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = F)
filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Pressure, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = F)
filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Pressure, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)
filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)
filter(data, Date > "2012-01-01", Date < "2014-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_line() + geom_point(aes(x = Date, y = value, fill = RainTomorrow), inherit.aes = T)
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_line() + geom_point(aes(x = Date, y = value, fill = RainTomorrow), inherit.aes = T)
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = Measurment)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = RainTomorrow)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = RainTomorrow)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)+
facet_grid(cols = Measurments)
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = RainTomorrow)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)+
facet_grid(cols = Measurment)
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = RainTomorrow)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)+
facet_grid(cols = Measurment)
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = RainTomorrow)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)+
facet_grid(cols = var(Measurment))
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = RainTomorrow)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)+
facet_grid(cols = vars(Measurment))
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = RainTomorrow)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)+
facet_grid(rows = vars(Measurment))
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value, color = RainTomorrow)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)+
facet_grid(rows = vars(Measurment), scales = "free")
filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T)+
facet_grid(rows = vars(Measurment), scales = "free")
ggplot(data = df2, aes(x = Quarter, y = Rainfall)) + geom_bar(stat = "summary", fun = mean) + ylab("Rainfall (mm)")
ggplot(data = df2, aes(x = Quarter, y = Rainfall)) + geom_bar(stat = "summary", fun = mean) + ylab("Rainfall (mm)")
ggplot(data = df3, aes(x = Quarter, y = mean, fill = Quarter)) + geom_bar(stat = "identity", width = 0.5) + geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), stat = "identity", width = 0.1, size = 1.1) + ylab("Rainfall (mm)")
ggplot(df, aes(x = Date, y = value, color = Data)) + geom_line() + geom_point() + ylab("")
ggplot(df, aes(x = Date, y = value, color = Data)) + geom_line() + geom_point() + ylab("")
ggplot(data, aes(x = Temp, y = Humidity, color = RainToday)) + geom_point()
ggplot(data, aes(x = Temp, y = Humidity, color = RainToday)) + geom_point()
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("Basic widgets"),
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", h3("Date range"))),
column(3,
fileInput("file", h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
column(3,
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", h3("Text input"),
value = "Enter text..."))
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
install.packages("shiny")
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("Basic widgets"),
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", h3("Date range"))),
column(3,
fileInput("file", h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
column(3,
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", h3("Text input"),
value = "Enter text..."))
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("Basic widgets"),
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", h3("Date range"))),
column(3,
fileInput("file", h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
column(3,
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", h3("Text input"),
value = "Enter text..."))
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
ggplot(aes(x = Date, y = value)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T) + facet_grid(rows = vars(Measurment), scales = "free")
ggplot(df4,aes(x = Date, y = value)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T) + facet_grid(rows = vars(Measurment), scales = "free")
# preprosti nacin
df4 <- data[data$Date > "2012-01-01" & data$Date < "2013-01-01" ]
# preprosti nacin
df4 <- data[data$Date > "2012-01-01" & data$Date < "2013-01-01" ]
# preprosti nacin
df4 <- data[data$Date > "2012-01-01" & data$Date < "2013-01-01", ]
df4 <- pivot_longer(df4, cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value")
# boljsi nacin z uporabo pakete dplyr
#filter(data, Date > "2012-01-01", Date < "2013-01-01" ) %>% pivot_longer(cols = c(Humidity, Temp, Pressure), names_to = "Measurment", values_to = "value") %>% ggplot(aes(x = Date, y = value)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T) + facet_grid(rows = vars(Measurment), scales = "free")
ggplot(df4,aes(x = Date, y = value)) + geom_line() + geom_point(aes(x = Date, y = value, color = RainTomorrow), inherit.aes = T) + facet_grid(rows = vars(Measurment), scales = "free")
zapolni_manjkajoce <- function(x){
if (!is.numeric(x)){
stop("Stolpec nima numericnih vrednosti!")
}
na_loc <- which(is.na(x)) # lokacija manjkajocih vrednosti
for (i in na_loc){
x[i] <- mean(x[i-2 : i-1], na.rm = T)
}
return(x)
}
num_cols <- which(sapply(data, class) %in% c("numeric", "integer"))
data[, num_cols] <- apply(data[, num_cols], 2, zapolni_manjkajoce)
zapolni_manjkajoce(c(1.5,NA,3,2))
zapolni_manjkajoce <- function(x){
if (!is.numeric(x)){
stop("Stolpec nima numericnih vrednosti!")
}
na_loc <- which(is.na(x)) # lokacija manjkajocih vrednosti
for (i in na_loc){
x[i] <- mean(x[i-2 : i], na.rm = T)
}
return(x)
}
zapolni_manjkajoce(c(1.5,NA,3,2))
zapolni_manjkajoce(c(1.5,NA,3,2))
testni_vector <- c(1, NA, 2, 3, 4, 5, 6)
zapolni_manjkajoce(testni_vector)
zapolni_manjkajoce <- function(x){
if (!is.numeric(x)){
stop("Stolpec nima numericnih vrednosti!")
}
na_loc <- which(is.na(x)) # lokacija manjkajocih vrednosti
for (i in na_loc){
if (i < 3){
x[i] <- mean(x, na.rm = T)
}else{
x[i] <- mean(x[i-2 : i], na.rm = T)
}
}
return(x)
}
num_cols <- which(sapply(data, class) %in% c("numeric", "integer"))
data[, num_cols] <- apply(data[, num_cols], 2, zapolni_manjkajoce)
testni_vector <- c(1, NA, 2, 3, 4, 5, 6)
zapolni_manjkajoce(testni_vector)
num_cols <- which(sapply(data, class) %in% c("numeric", "integer"))
data[, num_cols] <- apply(data[, num_cols], 2, zapolni_manjkajoce)
testni_vector <- c(1, NA, 2, 3, 4, 5, 6, NA)
zapolni_manjkajoce(testni_vector)
testni_vector <- c(1, NA, 2, 3, 4, 5, 6, 7, NA)
zapolni_manjkajoce(testni_vector)
testni_vector <- c(1, NA, 2, 3, 4, 5, 6, 7, 8, NA)
zapolni_manjkajoce(testni_vector)
testni_vector <- c(1, NA, 2, 3, 4, 5, NA)
zapolni_manjkajoce(testni_vector)
zapolni_manjkajoce <- function(x){
if (!is.numeric(x)){
stop("Stolpec nima numericnih vrednosti!")
}
na_loc <- which(is.na(x)) # lokacija manjkajocih vrednosti
for (i in na_loc){
if (i < 3){
x[i] <- mean(x, na.rm = T)
}else{
x[i] <- mean(x[i-2 : i-1], na.rm = T)
}
}
return(x)
}
num_cols <- which(sapply(data, class) %in% c("numeric", "integer"))
data[, num_cols] <- apply(data[, num_cols], 2, zapolni_manjkajoce)
testni_vector <- c(1, NA, 2, 3, 4, 5, NA)
zapolni_manjkajoce(testni_vector)
zapolni_manjkajoce <- function(x){
if (!is.numeric(x)){
stop("Stolpec nima numericnih vrednosti!")
}
na_loc <- which(is.na(x)) # lokacija manjkajocih vrednosti
print(na_loc)
for (i in na_loc){
print(i)
if (i < 3){
x[i] <- mean(x, na.rm = T)
}else{
x[i] <- mean(x[i-2 : i-1], na.rm = T)
}
}
return(x)
}
num_cols <- which(sapply(data, class) %in% c("numeric", "integer"))
data[, num_cols] <- apply(data[, num_cols], 2, zapolni_manjkajoce)
testni_vector <- c(1, NA, 2, 3, 4, 5, NA)
zapolni_manjkajoce(testni_vector)
zapolni_manjkajoce <- function(x){
if (!is.numeric(x)){
stop("Stolpec nima numericnih vrednosti!")
}
na_loc <- which(is.na(x)) # lokacija manjkajocih vrednosti
for (i in na_loc){
if (i < 3){
x[i] <- mean(x, na.rm = T)
}else{
print(i)
x[i] <- mean(x[i-2 : i-1], na.rm = T)
}
}
return(x)
}
num_cols <- which(sapply(data, class) %in% c("numeric", "integer"))
data[, num_cols] <- apply(data[, num_cols], 2, zapolni_manjkajoce)
testni_vector <- c(1, NA, 2, 3, 4, 5, NA)
zapolni_manjkajoce(testni_vector)
zapolni_manjkajoce <- function(x){
if (!is.numeric(x)){
stop("Stolpec nima numericnih vrednosti!")
}
na_loc <- which(is.na(x)) # lokacija manjkajocih vrednosti
for (i in na_loc){
if (i < 3){
x[i] <- mean(x, na.rm = T)
}else{
x[i] <- mean(x[(i-2) : i], na.rm = T)
}
}
return(x)
}
num_cols <- which(sapply(data, class) %in% c("numeric", "integer"))
data[, num_cols] <- apply(data[, num_cols], 2, zapolni_manjkajoce)
testni_vector <- c(1, NA, 2, 3, 4, 5, NA)
zapolni_manjkajoce(testni_vector)
