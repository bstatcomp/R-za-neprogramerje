# krajši in bolj eleganten pristop:
votes <- tapply(x$votes, candidates, sum)
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
```{r echo = F}
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- tapply(x$votes, as.factor(x[, output]), sum)
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- tapply(x$votes, factor(x[, output]), sum)
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- tapply(x$votes, factor(x[, output]), sum)
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T), ], 15)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- tapply(x$votes, factor(x[, output]), sum)
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T,), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- tapply(x$votes, factor(x[, output]), sum)
print(class(votes))
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T,), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- tapply(x$votes, factor(x[, output]), sum)
print(class(votes))
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
print(class(votes))
results <- data.frame(candidate = candidates, votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# daljši in manj eleganten pristop:
# votes <- NULL
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = candidates, votes = votes)
return(results)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# daljši in manj eleganten pristop:
# votes <- NULL
# candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(results)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# daljši in manj eleganten pristop:
# votes <- NULL
# candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
View(x)
top_3 <- function(df, state, output){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# daljši in manj eleganten pristop:
# votes <- NULL
# candidates <- unique(x[, output]) # dobimo vektor kandidatov/imen strank
# for (cand in candidates){ # v zanki izračunamo vsoto glasov za vsakega kandidata
#   votes <- c(votes, sum(x[x[,output] == cand, "votes"])) # dodamo v končni vektor votes
# }
# results <- data.frame(candidate = candidates, votes = votes)
#
# krajši in bolj eleganten pristop:
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_3(x, 'Arkansas', 'party')
top_3(x, 'Arkansas', 'candidate')
top_n <- function(df, state, output, n = 5){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# Preverimo če n ni napačen:
if (n > nrow(x)){
warning(paste0("Prevelik 'n', vrednost spremenjena v: ", nrow(x)))
n <- nrow(x)
}
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(head(results[order(votes, decreasing = T), ], 3)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_n(x, 'Arkansas', 'candidate')
top_n <- function(df, state, output, n = 5){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# Preverimo če n ni napačen:
if (n > nrow(x)){
warning(paste0("Prevelik 'n', vrednost spremenjena v: ", nrow(x)))
n <- nrow(x)
}
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(head(results[order(votes, decreasing = T), ], n)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_n(x, 'Arkansas', 'candidate')
top_n(x, 'West Virginia', 'candidate', 100)
top_n <- function(df, state, output, n = 5){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# Preverimo če n ni napačen:
if (n > nrow(x)){
warning(paste0("Prevelik 'n', vrednost spremenjena v: ", nrow(x)))
n <- nrow(x)
}
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(head(results[order(votes, decreasing = T), ], n)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_n(x, 'Arkansas', 'candidate')
top_n(x, 'West Virginia', 'candidate', 100)
# Preverimo če n ni napačen:
max_length <- length(unique(x$candidate))
top_n <- function(df, state, output, n = 5){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# Preverimo če n ni napačen:
max_length <- length(unique(x$candidate))
if (n > max_length){
warning(paste0("Prevelik 'n', vrednost spremenjena v: ", max_length))
n <- max_length
}
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(head(results[order(votes, decreasing = T), ], n)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_n(x, 'Arkansas', 'candidate')
top_n(x, 'West Virginia', 'candidate', 100)
top_n <- function(df, state, output, n = 5){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# Preverimo če n ni napačen:
max_length <- length(unique(x[, output]))
if (n > max_length){
warning(paste0("Prevelik 'n', vrednost spremenjena v: ", max_length))
n <- max_length
}
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(head(results[order(votes, decreasing = T), ], n)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_n(x, 'Arkansas', 'candidate')
top_n(x, 'West Virginia', 'candidate', 100)
top_n <- function(df, state, output, n = 5){
# preverimo pravilnost vhoda
if(!(output %in% c("candidate", "party"))){
stop("Napačna vrednost za parameter 'output'!")
}
# tabeli odrežemo nepotrebne vrstice:
x <- df[df$state == state, c(output, "votes") ]
# Preverimo če n ni napačen:
max_length <- length(unique(x[, output]))
if (n > max_length){
warning(paste0("Prevelik 'n', vrednost spremenjena v: ", max_length))
n <- max_length
}
votes <- as.numeric(tapply(x$votes, factor(x[, output]), sum))
results <- data.frame(candidate = levels(factor(x[, output])), votes = votes)
return(head(results[order(votes, decreasing = T), ], n)) # uredimo po vektorju votes in vrnemo le prve 3.
}
top_n(x, 'Arkansas', 'candidate')
top_n(x, 'Virginia', 'candidate', 100)
View(x)
View(x)
plot_votes <- function(df, states){
x <- df[df$states %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
p <- ggplot(x, aes(x = states, y = votes, fill = party) ) + geom_bar(stat = "sum")
show(p)
}
plot_votes(x, c("California", "Oregon"))
plot_votes <- function(df, states){
x <- df[df$states %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
print(colnames(x))
p <- ggplot(x, aes(x = states, y = votes, fill = party) ) + geom_bar(stat = "sum")
show(p)
}
plot_votes(x, c("California", "Oregon"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
print(colnames(x))
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "sum")
show(p)
}
plot_votes(x, c("California", "Oregon"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
print(colnames(x))
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "sum", position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Oregon"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "mean", position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Oregon"))
```{r echo = F}
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "sum", position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "Massachussets"))
plot_votes(x, c("California", "Florida", "Iowa", "New York"))
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "count", position = 'dodge')
show(p)
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "count", position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "sum", position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = stat_sum(prop = T), position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = stat_summary(fun = mean), position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
st <-
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "sumary"), position = 'dodge')
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
st <-
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "sumary", position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
st <-
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "summary", position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
st <-
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "summary", fun = mean, position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
st <-
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "summary", fun.y = mean, position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
st <-
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "sum", position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
plot_votes <- function(df, states){
x <- df[df$state %in% states, ]
x <- x[x$party %in% c("DEM", "REP", "LIB"), ]
st <-
p <- ggplot(x, aes(x = state, y = votes, fill = party) ) + geom_bar(stat = "summary", fun = sum, position = 'dodge')
show(p)
}
plot_votes(x, c("California", "Florida", "Iowa", "New York", "Alabama"))
